// <auto-generated />
using System;
using Fitnes.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fitnes.Storage.Migrations
{
    [DbContext(typeof(FitnesDbContext))]
    partial class FitnesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fitnes.Storage.Repository.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnName("Subsription")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrainerId")
                        .HasColumnName("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Experience")
                        .HasColumnName("Experience")
                        .HasColumnType("float");

                    b.Property<Guid?>("GymId")
                        .IsRequired()
                        .HasColumnName("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .IsRequired()
                        .HasColumnName("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Salary")
                        .HasColumnName("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Gym", b =>
                {
                    b.Property<Guid>("GymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GymId");

                    b.ToTable("Gym");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.GymTrainingMachine", b =>
                {
                    b.Property<Guid?>("GymId")
                        .HasColumnName("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrainingMachineId")
                        .HasColumnName("TrainingMachineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GymId", "TrainingMachineId");

                    b.HasIndex("TrainingMachineId");

                    b.ToTable("GymTrainingMachine");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.ProgramWorkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .IsRequired()
                        .HasColumnName("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnName("Period")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ProgramWorkout");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProgramWorkoutId")
                        .IsRequired()
                        .HasColumnName("ProgramWorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProgramWorkoutId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnName("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramWorkoutId")
                        .IsRequired()
                        .HasColumnName("ProgramWorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProgramWorkoutId");

                    b.ToTable("Trainer");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.TrainingMachine", b =>
                {
                    b.Property<Guid>("TrainingMachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TrainingMachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsForBack")
                        .HasColumnName("IsForBack")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForHand")
                        .HasColumnName("IsForHand")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForLeg")
                        .HasColumnName("IsForLeg")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingMachineId");

                    b.ToTable("TrainingMachine");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Client", b =>
                {
                    b.HasOne("Fitnes.Storage.Repository.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("Fitnes.Storage.Repository.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Employee", b =>
                {
                    b.HasOne("Fitnes.Storage.Repository.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitnes.Storage.Repository.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.GymTrainingMachine", b =>
                {
                    b.HasOne("Fitnes.Storage.Repository.Gym", "Gym")
                        .WithMany("GymTrainingMachines")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitnes.Storage.Repository.TrainingMachine", "TrainingMachine")
                        .WithMany("GymTrainingMachines")
                        .HasForeignKey("TrainingMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.ProgramWorkout", b =>
                {
                    b.HasOne("Fitnes.Storage.Repository.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Subscription", b =>
                {
                    b.HasOne("Fitnes.Storage.Repository.ProgramWorkout", "ProgramWorkout")
                        .WithMany()
                        .HasForeignKey("ProgramWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitnes.Storage.Repository.Trainer", b =>
                {
                    b.HasOne("Fitnes.Storage.Repository.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitnes.Storage.Repository.ProgramWorkout", "ProgramWorkout")
                        .WithMany()
                        .HasForeignKey("ProgramWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
